[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"Persistence.CosmosDB.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001006dab16cbf58f948e25e061c40486817b00722158f0a2787d8cd3f503daf44978f96edac144e917e59ec98999e011ddde52c53938a6cb5a87a213aa2b5dfe2d45e9035ca40c63caf36c8692e06bbc3eb717070e8ca5813ef695153429dcc4fd7db4c790c724e959b37d9697f7dc22369a20ae67f4785b424edbc63c732dd9eecf")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"Persistence.StorageTable.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001006dab16cbf58f948e25e061c40486817b00722158f0a2787d8cd3f503daf44978f96edac144e917e59ec98999e011ddde52c53938a6cb5a87a213aa2b5dfe2d45e9035ca40c63caf36c8692e06bbc3eb717070e8ca5813ef695153429dcc4fd7db4c790c724e959b37d9697f7dc22369a20ae67f4785b424edbc63c732dd9eecf")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001006dab16cbf58f948e25e061c40486817b00722158f0a2787d8cd3f503daf44978f96edac144e917e59ec98999e011ddde52c53938a6cb5a87a213aa2b5dfe2d45e9035ca40c63caf36c8692e06bbc3eb717070e8ca5813ef695153429dcc4fd7db4c790c724e959b37d9697f7dc22369a20ae67f4785b424edbc63c732dd9eecf")]
namespace NServiceBus
{
    public sealed class AzureTablePersistence : NServiceBus.Persistence.PersistenceDefinition { }
    public class CompatibilitySettings : NServiceBus.Configuration.AdvancedExtensibility.ExposeSettings
    {
        public void AllowSecondaryKeyLookupToFallbackToFullTableScan() { }
        public void AssumeSecondaryKeyUsesANonEmptyRowKeySetToThePartitionKey() { }
        public void DisableSecondaryKeyLookupForSagasCorrelatedByProperties() { }
    }
    public static class ConfigureAzureSagaStorage
    {
        public static NServiceBus.CompatibilitySettings Compatibility(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> ConnectionString(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config, string connectionString) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> DisableTableCreation(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> JsonSettings(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config, Newtonsoft.Json.JsonSerializerSettings jsonSerializerSettings) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> ReaderCreator(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config, System.Func<System.IO.TextReader, Newtonsoft.Json.JsonReader> readerCreator) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> UseCloudTableClient(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config, Microsoft.Azure.Cosmos.Table.CloudTableClient client) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> WriterCreator(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config, System.Func<System.IO.StringWriter, Newtonsoft.Json.JsonWriter> writerCreator) { }
    }
    public static class ConfigureAzureStorage
    {
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> ConnectionString(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> config, string connectionString) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> DefaultTable(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> config, string tableName) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> DisableTableCreation(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> config) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> UseCloudTableClient(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> config, Microsoft.Azure.Cosmos.Table.CloudTableClient client) { }
    }
    public static class ConfigureAzureSubscriptionStorage
    {
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> CacheFor(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> config, System.TimeSpan timeSpan) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> ConnectionString(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> config, string connectionString) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> DisableTableCreation(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> config) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> TableName(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> config, string tableName) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> UseCloudTableClient(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> config, Microsoft.Azure.Cosmos.Table.CloudTableClient client) { }
    }
    public readonly struct TableEntityPartitionKey : System.IEquatable<NServiceBus.TableEntityPartitionKey>
    {
        public TableEntityPartitionKey(string partitionKey) { }
        public string PartitionKey { get; }
        public bool Equals(NServiceBus.TableEntityPartitionKey other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public static bool operator !=(NServiceBus.TableEntityPartitionKey left, NServiceBus.TableEntityPartitionKey right) { }
        public static bool operator ==(NServiceBus.TableEntityPartitionKey left, NServiceBus.TableEntityPartitionKey right) { }
    }
    public readonly struct TableInformation
    {
        public TableInformation(string tableName) { }
        public string TableName { get; }
    }
}
namespace NServiceBus.Persistence.AzureTable
{
    public class DuplicatedSagaFoundException : System.Exception
    {
        public DuplicatedSagaFoundException(System.Type sagaType, string propertyName, params System.Guid[] identifiers) { }
        public System.Guid[] Identifiers { get; }
        public string PropertyName { get; }
        public System.Type SagaType { get; }
    }
    public interface IAzureTableStorageSession
    {
        Microsoft.Azure.Cosmos.Table.TableBatchOperation Batch { get; }
        string PartitionKey { get; }
        Microsoft.Azure.Cosmos.Table.CloudTable Table { get; }
    }
    public interface IProvideCloudTableClient
    {
        Microsoft.Azure.Cosmos.Table.CloudTableClient Client { get; }
    }
    public interface IProvideCloudTableClientForSubscriptions
    {
        Microsoft.Azure.Cosmos.Table.CloudTableClient Client { get; }
    }
    public interface IProvidePartitionKeyFromSagaId
    {
        System.Threading.Tasks.Task SetPartitionKey<TSagaData>(NServiceBus.Pipeline.IIncomingLogicalMessageContext context, NServiceBus.Sagas.SagaCorrelationProperty correlationProperty)
            where TSagaData : NServiceBus.IContainSagaData;
    }
    public sealed class LogicalOutboxBehavior : NServiceBus.Pipeline.IBehavior, NServiceBus.Pipeline.IBehavior<NServiceBus.Pipeline.IIncomingLogicalMessageContext, NServiceBus.Pipeline.IIncomingLogicalMessageContext>
    {
        public System.Threading.Tasks.Task Invoke(NServiceBus.Pipeline.IIncomingLogicalMessageContext context, System.Func<NServiceBus.Pipeline.IIncomingLogicalMessageContext, System.Threading.Tasks.Task> next) { }
    }
    public class RetryNeededException : System.Exception
    {
        public RetryNeededException() { }
        public RetryNeededException(System.Exception innerException) { }
    }
    public static class SynchronizedStorageSessionExtensions
    {
        public static NServiceBus.Persistence.AzureTable.IAzureTableStorageSession AzureTablePersistenceSession(this NServiceBus.Persistence.ISynchronizedStorageSession session) { }
    }
    public sealed class TableBatchOperationException : System.Exception
    {
        public TableBatchOperationException(Microsoft.Azure.Cosmos.Table.TableResult result) { }
        public Microsoft.Azure.Cosmos.Table.TableResult Result { get; }
    }
}
namespace NServiceBus.Testing
{
    public class TestableAzureTableStorageSession : NServiceBus.Persistence.AzureTable.IAzureTableStorageSession, NServiceBus.Persistence.ISynchronizedStorageSession
    {
        public TestableAzureTableStorageSession(NServiceBus.TableEntityPartitionKey partitionKey) { }
        public Microsoft.Azure.Cosmos.Table.TableBatchOperation Batch { get; set; }
        public string PartitionKey { get; }
        public Microsoft.Azure.Cosmos.Table.CloudTable Table { get; set; }
    }
}