[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"Persistence.CosmosDB.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"Persistence.StorageTable.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
namespace NServiceBus
{
    [System.Obsolete("The persistence has been renamed from AzureStorage to AzureTable. Use `AzureTable" +
        "Persistence` instead. Will be removed in version 4.0.0.", true)]
    public class AzureStoragePersistence : NServiceBus.Persistence.PersistenceDefinition
    {
        public AzureStoragePersistence() { }
    }
    [System.Obsolete("The saga persistence feature is no longer exposed as a public type. Will be remov" +
        "ed in version 4.0.0.", true)]
    public class AzureStorageSagaPersistence
    {
        public AzureStorageSagaPersistence() { }
    }
    [System.Obsolete("The subscription persistence feature is no longer exposed as a public type. Will " +
        "be removed in version 4.0.0.", true)]
    public class AzureStorageSubscriptionPersistence
    {
        public AzureStorageSubscriptionPersistence() { }
    }
    [System.Obsolete("Azure transports support timeouts natively and do not require timeout persistence" +
        ". Will be removed in version 4.0.0.", true)]
    public class AzureStorageTimeoutPersistence
    {
        public AzureStorageTimeoutPersistence() { }
    }
    public sealed class AzureTablePersistence : NServiceBus.Persistence.PersistenceDefinition { }
    public class CompatibilitySettings : NServiceBus.Configuration.AdvancedExtensibility.ExposeSettings
    {
        public void AllowSecondaryKeyLookupToFallbackToFullTableScan() { }
        public void AssumeSecondaryKeyUsesANonEmptyRowKeySetToThePartitionKey() { }
        public void DisableSecondaryKeyLookupForSagasCorrelatedByProperties() { }
    }
    public static class ConfigureAzureSagaStorage
    {
        [System.Obsolete(@"The compatibility mode that supports looking up correlated sagas by secondary indexes is by default enabled and assumes no full table scan is required. In order to opt-in for a table scan for sagas stored with version 1.4 or earlier use `AllowSecondaryKeyLookupToFallbackToFullTableScan`. The member currently throws a NotImplementedException. Will be removed in version 4.0.0.", true)]
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> AssumeSecondaryIndicesExist(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config) { }
        public static NServiceBus.CompatibilitySettings Compatibility(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> ConnectionString(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config, string connectionString) { }
        [System.Obsolete(@"The table creation is enabled when the installers are enabled. In order to disable table creation either remove `endpointConfiguration.EnableInstallers()` or opt-out from table creation by calling `DisableTableCreation`. Table creation at runtime without installers enabled is no longer supported. The tables required at runtime when the installers are disabled need to be created during via operational scripting. Consolidate the upgrade guide for more details. The member currently throws a NotImplementedException. Will be removed in version 4.0.0.", true)]
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> CreateSchema(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config, bool createSchema) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> DisableTableCreation(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> JsonSettings(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config, Newtonsoft.Json.JsonSerializerSettings jsonSerializerSettings) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> ReaderCreator(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config, System.Func<System.IO.TextReader, Newtonsoft.Json.JsonReader> readerCreator) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> UseCloudTableClient(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config, Microsoft.Azure.Cosmos.Table.CloudTableClient client) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> WriterCreator(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config, System.Func<System.IO.StringWriter, Newtonsoft.Json.JsonWriter> writerCreator) { }
    }
    public static class ConfigureAzureStorage
    {
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> ConnectionString(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> config, string connectionString) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> DefaultTable(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> config, string tableName) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> DisableTableCreation(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> config) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> UseCloudTableClient(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> config, Microsoft.Azure.Cosmos.Table.CloudTableClient client) { }
    }
    public static class ConfigureAzureSubscriptionStorage
    {
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> CacheFor(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> config, System.TimeSpan timeSpan) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> ConnectionString(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> config, string connectionString) { }
        [System.Obsolete(@"The table creation is enabled when the installers are enabled. In order to disable table creation either remove `endpointConfiguration.EnableInstallers()` or opt-out from table creation by calling `DisableTableCreation`. Table creation at runtime without installers enabled is no longer supported. The tables required at runtime when the installers are disabled need to be created during via operational scripting. Consolidate the upgrade guide for more details. The member currently throws a NotImplementedException. Will be removed in version 4.0.0.", true)]
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> CreateSchema(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> config, bool createSchema) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> DisableTableCreation(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> config) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> TableName(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> config, string tableName) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> UseCloudTableClient(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> config, Microsoft.Azure.Cosmos.Table.CloudTableClient client) { }
    }
    public static class ConfigureAzureTimeoutStorage
    {
        [System.Obsolete("Azure transports support timeouts natively and do not require timeout persistence" +
            ". The member currently throws a NotImplementedException. Will be removed in vers" +
            "ion 4.0.0.", true)]
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Timeouts> CatchUpInterval(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Timeouts> config, int catchUpInterval) { }
        [System.Obsolete("Azure transports support timeouts natively and do not require timeout persistence" +
            ". The member currently throws a NotImplementedException. Will be removed in vers" +
            "ion 4.0.0.", true)]
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Timeouts> ConnectionString(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Timeouts> config, string connectionString) { }
        [System.Obsolete("Azure transports support timeouts natively and do not require timeout persistence" +
            ". The member currently throws a NotImplementedException. Will be removed in vers" +
            "ion 4.0.0.", true)]
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Timeouts> CreateSchema(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Timeouts> config, bool createSchema) { }
        [System.Obsolete("Azure transports support timeouts natively and do not require timeout persistence" +
            ". The member currently throws a NotImplementedException. Will be removed in vers" +
            "ion 4.0.0.", true)]
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Timeouts> PartitionKeyScope(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Timeouts> config, string partitionKeyScope) { }
        [System.Obsolete("Azure transports support timeouts natively and do not require timeout persistence" +
            ". The member currently throws a NotImplementedException. Will be removed in vers" +
            "ion 4.0.0.", true)]
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Timeouts> TimeoutDataTableName(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Timeouts> config, string tableName) { }
        [System.Obsolete("Azure transports support timeouts natively and do not require timeout persistence" +
            ". The member currently throws a NotImplementedException. Will be removed in vers" +
            "ion 4.0.0.", true)]
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Timeouts> TimeoutManagerDataTableName(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Timeouts> config, string tableName) { }
        [System.Obsolete("Azure transports support timeouts natively and do not require timeout persistence" +
            ". The member currently throws a NotImplementedException. Will be removed in vers" +
            "ion 4.0.0.", true)]
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Timeouts> TimeoutStateContainerName(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Timeouts> config, string blobName) { }
    }
    public readonly struct TableEntityPartitionKey : System.IEquatable<NServiceBus.TableEntityPartitionKey>
    {
        public TableEntityPartitionKey(string partitionKey) { }
        public string PartitionKey { get; }
        public bool Equals(NServiceBus.TableEntityPartitionKey other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public static bool operator !=(NServiceBus.TableEntityPartitionKey left, NServiceBus.TableEntityPartitionKey right) { }
        public static bool operator ==(NServiceBus.TableEntityPartitionKey left, NServiceBus.TableEntityPartitionKey right) { }
    }
    public readonly struct TableInformation
    {
        public TableInformation(string tableName) { }
        public string TableName { get; }
    }
}
namespace NServiceBus.Persistence.AzureTable
{
    public class DuplicatedSagaFoundException : System.Exception
    {
        public DuplicatedSagaFoundException(System.Type sagaType, string propertyName, params System.Guid[] identifiers) { }
        public System.Guid[] Identifiers { get; }
        public string PropertyName { get; }
        public System.Type SagaType { get; }
    }
    public interface IAzureTableStorageSession
    {
        Microsoft.Azure.Cosmos.Table.TableBatchOperation Batch { get; }
        string PartitionKey { get; }
        Microsoft.Azure.Cosmos.Table.CloudTable Table { get; }
    }
    public interface IProvideCloudTableClient
    {
        Microsoft.Azure.Cosmos.Table.CloudTableClient Client { get; }
    }
    public interface IProvideCloudTableClientForSubscriptions
    {
        Microsoft.Azure.Cosmos.Table.CloudTableClient Client { get; }
    }
    public interface IProvidePartitionKeyFromSagaId
    {
        System.Threading.Tasks.Task SetPartitionKey<TSagaData>(NServiceBus.Pipeline.IIncomingLogicalMessageContext context, NServiceBus.Sagas.SagaCorrelationProperty correlationProperty)
            where TSagaData : NServiceBus.IContainSagaData;
    }
    public sealed class LogicalOutboxBehavior : NServiceBus.Pipeline.IBehavior, NServiceBus.Pipeline.IBehavior<NServiceBus.Pipeline.IIncomingLogicalMessageContext, NServiceBus.Pipeline.IIncomingLogicalMessageContext>
    {
        public System.Threading.Tasks.Task Invoke(NServiceBus.Pipeline.IIncomingLogicalMessageContext context, System.Func<NServiceBus.Pipeline.IIncomingLogicalMessageContext, System.Threading.Tasks.Task> next) { }
    }
    public class RetryNeededException : System.Exception
    {
        public RetryNeededException() { }
        public RetryNeededException(System.Exception innerException) { }
    }
    public static class SynchronizedStorageSessionExtensions
    {
        public static NServiceBus.Persistence.AzureTable.IAzureTableStorageSession AzureTablePersistenceSession(this NServiceBus.Persistence.SynchronizedStorageSession session) { }
    }
    public sealed class TableBatchOperationException : System.Exception
    {
        public TableBatchOperationException(Microsoft.Azure.Cosmos.Table.TableResult result) { }
        public Microsoft.Azure.Cosmos.Table.TableResult Result { get; }
    }
}
namespace NServiceBus.Testing
{
    public class TestableAzureTableStorageSession : NServiceBus.Persistence.AzureTable.IAzureTableStorageSession, NServiceBus.Persistence.SynchronizedStorageSession
    {
        public TestableAzureTableStorageSession(NServiceBus.TableEntityPartitionKey partitionKey) { }
        public Microsoft.Azure.Cosmos.Table.TableBatchOperation Batch { get; set; }
        public string PartitionKey { get; }
        public Microsoft.Azure.Cosmos.Table.CloudTable Table { get; set; }
    }
}