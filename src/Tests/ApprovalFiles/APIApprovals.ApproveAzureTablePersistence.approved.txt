[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Persistence.AzureTable.TransactionalSession, PublicKey=0024000004800000940000000602000000240000525341310004000001000100dde965e6172e019ac82c2639ffe494dd2e7dd16347c34762a05732b492e110f2e4e2e1b5ef2d85c848ccfb671ee20a47c8d1376276708dc30a90ff1121b647ba3b7259a6bc383b2034938ef0e275b58b920375ac605076178123693c6c4f1331661a62eba28c249386855637780e3ff5f23a6d854700eaa6803ef48907513b92")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NonTxSagasWithConventionalTables.CosmosDB.AcceptanceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NonTxSagasWithConventionalTables.StorageTable.AcceptanceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"Persistence.CosmosDB.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"Persistence.StorageTable.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
namespace NServiceBus
{
    public sealed class AzureTablePersistence : NServiceBus.Persistence.PersistenceDefinition { }
    [System.Obsolete("Compatibility mode is deprecated. Will be removed in version 8.0.0.", true)]
    public class CompatibilitySettings : NServiceBus.Configuration.AdvancedExtensibility.ExposeSettings
    {
        [System.Obsolete("Compatibility mode is deprecated. The member currently throws a NotImplementedExc" +
            "eption. Will be removed in version 8.0.0.", true)]
        public void AllowSecondaryKeyLookupToFallbackToFullTableScan() { }
        [System.Obsolete("Compatibility mode is deprecated. The member currently throws a NotImplementedExc" +
            "eption. Will be removed in version 8.0.0.", true)]
        public void AssumeSecondaryKeyUsesANonEmptyRowKeySetToThePartitionKey() { }
        [System.Obsolete("Compatibility mode is deprecated. The member currently throws a NotImplementedExc" +
            "eption. Will be removed in version 8.0.0.", true)]
        public void EnableSecondaryKeyLookupForSagasCorrelatedByProperties() { }
    }
    public static class ConfigureAzureSagaStorage
    {
        [System.Obsolete("Compatibility mode is deprecated. The member currently throws a NotImplementedExc" +
            "eption. Will be removed in version 8.0.0.", true)]
        public static NServiceBus.CompatibilitySettings Compatibility(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> ConnectionString(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config, string connectionString) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> DisableTableCreation(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> JsonSettings(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config, Newtonsoft.Json.JsonSerializerSettings jsonSerializerSettings) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> ReaderCreator(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config, System.Func<System.IO.TextReader, Newtonsoft.Json.JsonReader> readerCreator) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> UseTableServiceClient(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config, Azure.Data.Tables.TableServiceClient client) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> WriterCreator(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Sagas> config, System.Func<System.IO.StringWriter, Newtonsoft.Json.JsonWriter> writerCreator) { }
    }
    public static class ConfigureAzureStorage
    {
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> ConnectionString(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> config, string connectionString) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> DefaultTable(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> config, string tableName) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> DisableTableCreation(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> config) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> UseTableServiceClient(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence> config, Azure.Data.Tables.TableServiceClient client) { }
    }
    public static class ConfigureAzureSubscriptionStorage
    {
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> CacheFor(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> config, System.TimeSpan timeSpan) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> ConnectionString(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> config, string connectionString) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> DisableTableCreation(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> config) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> TableName(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> config, string tableName) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> UseTableServiceClient(this NServiceBus.PersistenceExtensions<NServiceBus.AzureTablePersistence, NServiceBus.StorageType.Subscriptions> config, Azure.Data.Tables.TableServiceClient client) { }
    }
    public readonly struct TableEntityPartitionKey : System.IEquatable<NServiceBus.TableEntityPartitionKey>
    {
        public TableEntityPartitionKey(string partitionKey) { }
        public string PartitionKey { get; }
        public bool Equals(NServiceBus.TableEntityPartitionKey other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public static bool operator !=(NServiceBus.TableEntityPartitionKey left, NServiceBus.TableEntityPartitionKey right) { }
        public static bool operator ==(NServiceBus.TableEntityPartitionKey left, NServiceBus.TableEntityPartitionKey right) { }
    }
    public readonly struct TableInformation
    {
        public TableInformation(string tableName) { }
        public string TableName { get; }
    }
}
namespace NServiceBus.Persistence.AzureTable
{
    public class DuplicatedSagaFoundException : System.Exception
    {
        public DuplicatedSagaFoundException(System.Type sagaType, string propertyName, params System.Guid[] identifiers) { }
        public System.Guid[] Identifiers { get; }
        public string PropertyName { get; }
        public System.Type SagaType { get; }
    }
    public interface IAzureTableStorageSession
    {
        System.Collections.Generic.List<Azure.Data.Tables.TableTransactionAction> Batch { get; }
        string PartitionKey { get; }
        Azure.Data.Tables.TableClient Table { get; }
    }
    public interface IProvidePartitionKeyFromSagaId
    {
        System.Threading.Tasks.Task SetPartitionKey<TSagaData>(NServiceBus.Pipeline.IIncomingLogicalMessageContext context, NServiceBus.Sagas.SagaCorrelationProperty correlationProperty)
            where TSagaData : NServiceBus.IContainSagaData;
    }
    public interface IProvideTableServiceClient
    {
        Azure.Data.Tables.TableServiceClient Client { get; }
    }
    public interface IProvideTableServiceClientForSubscriptions
    {
        Azure.Data.Tables.TableServiceClient Client { get; }
    }
    public sealed class LogicalOutboxBehavior : NServiceBus.Pipeline.IBehavior, NServiceBus.Pipeline.IBehavior<NServiceBus.Pipeline.IIncomingLogicalMessageContext, NServiceBus.Pipeline.IIncomingLogicalMessageContext>
    {
        public System.Threading.Tasks.Task Invoke(NServiceBus.Pipeline.IIncomingLogicalMessageContext context, System.Func<NServiceBus.Pipeline.IIncomingLogicalMessageContext, System.Threading.Tasks.Task> next) { }
    }
    public static class SynchronizedStorageSessionExtensions
    {
        public static NServiceBus.Persistence.AzureTable.IAzureTableStorageSession AzureTablePersistenceSession(this NServiceBus.Persistence.ISynchronizedStorageSession session) { }
    }
    public sealed class TableBatchOperationException : System.Exception
    {
        public TableBatchOperationException(Azure.Response result) { }
        public Azure.Response Result { get; }
    }
}
namespace NServiceBus.Testing
{
    public class TestableAzureTableStorageSession : NServiceBus.Persistence.AzureTable.IAzureTableStorageSession, NServiceBus.Persistence.ISynchronizedStorageSession
    {
        public TestableAzureTableStorageSession(NServiceBus.TableEntityPartitionKey partitionKey) { }
        public System.Collections.Generic.List<Azure.Data.Tables.TableTransactionAction> Batch { get; set; }
        public string PartitionKey { get; }
        public Azure.Data.Tables.TableClient Table { get; set; }
    }
}