name: CI
on:
  push:
    branches:
      - master
      - release-[2-9].*
  pull_request:
    branches-ignore:
      - release-[0-1].*
  pull_request_target:
    branches-ignore:
      - release-[0-1].*
  workflow_dispatch:
env:
  DOTNET_NOLOGO: true
jobs:
  build:
    if:
      (github.event_name == 'pull_request_target' && github.event.pull_request.user.login == 'dependabot[bot]') ||
      (github.event_name == 'pull_request' && github.event.pull_request.user.login != 'dependabot[bot]') ||
      github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-2019
            name: Windows
          - os: ubuntu-20.04
            name: Linux
      fail-fast: false
    steps:
      - name: Check for secrets
        env:
          SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
        shell: pwsh
        run: exit $(If ($env:SECRETS_AVAILABLE -eq 'true') { 0 } Else { 1 })
      - name: Checkout
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
      - name: Checkout for Dependabot
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v2.4.0
        with:
          ref: 'refs/pull/${{ github.event.number }}/merge'
          fetch-depth: 0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: 6.0.x
      - name: Setup .NET Core 3.1 runtime
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: 3.1.x
      - name: Build
        run: dotnet build src --configuration Release
      - name: Upload packages
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v2.2.4
        with:
          name: NuGet packages
          path: nugets/
          retention-days: 7
      - name: Azure login
        uses: azure/login@v1.4.0
        with:
          creds: ${{ secrets.AZURE_ACI_CREDENTIALS }}
      - name: Setup Cosmos DB
        uses: Particular/setup-cosmosdb-action@v1.0.0
        with:
          connection-string-name: AzureTable_CosmosDB_ConnectionString
          azure-credentials: ${{ secrets.AZURE_ACI_CREDENTIALS }}
          tag: AzureStoragePersistence
          api: Table
      - name: Setup storage account
        id: infra
        shell: pwsh
        run: |
          # Retrieve the Azure region in which this workflow is running. This region should be used to create addtional resources.
          $hostInfo = curl -H Metadata:true "169.254.169.254/metadata/instance?api-version=2017-08-01" | ConvertFrom-Json
          $region = $hostInfo.compute.location
          echo "Actions agent running in Azure region $region"

          $rand = Get-Random
          $storagename = "pswtables$($rand)"
          echo "::set-output name=storagename::$storagename"
          $dateTag = "Created=$(Get-Date -Format "yyyy-MM-dd")"

          echo "Creating storage account (This can take awhile.)"
          $storageDetails = az storage account create --name $storagename --resource-group GitHubActions-RG --sku Standard_LRS | ConvertFrom-Json

          echo "Getting storage account keys"
          $storageKeyDetails = az storage account keys list --account-name $storagename --resource-group GitHubActions-RG | ConvertFrom-Json
          $storageKey = $storageKeyDetails[0].value
          echo "::add-mask::$storageKey"
          $storageConnectString = "DefaultEndpointsProtocol=https;AccountName=$storagename;AccountKey=$storageKey"

          echo "Tagging storage account"
          $ignore = az tag create --resource-id $storageDetails.id --tags Package=AzureStorage RunnerOS=${{ runner.os }} $dateTag

          echo "AzureTable_StorageTable_ConnectionString=$storageConnectString" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

          # Extra details for teardown
          echo "::add-mask::$($acctDetails.id)"
          echo "::set-output name=comsosAccountId::$($acctDetails.id)"
      - name: Run tests
        uses: Particular/run-tests-action@v1.0.0
      - name: Teardown infrastructure
        if: ${{ always() }}
        continue-on-error: true
        shell: pwsh
        run: |
          echo "Deleting storage account ${{ steps.infra.outputs.storagename }}"
          $ignore = az storage account delete --resource-group GitHubActions-RG --name ${{ steps.infra.outputs.storagename }} --yes